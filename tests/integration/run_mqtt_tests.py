#!/usr/bin/env python3
"""
MQTT Bus Test Runner
====================

Comprehensive test runner for the Alicia Smart Home AI Assistant MQTT Bus test suite.
Provides different test execution modes and detailed reporting.

Generated by MCP QA Orchestrator
Author: Cline MCP Implementation
Version: 1.0.0
"""

import os
import sys
import argparse
import subprocess
import json
import time
from pathlib import Path
from typing import List, Dict, Any
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MQTTTestRunner:
    """Test runner for MQTT Bus test suite"""
    
    def __init__(self, test_dir: str = "tests"):
        self.test_dir = Path(test_dir)
        self.results_dir = self.test_dir / "results"
        self.results_dir.mkdir(exist_ok=True)
        
    def run_tests(self, 
                  test_type: str = "all",
                  verbose: bool = True,
                  parallel: bool = False,
                  coverage: bool = False,
                  html_report: bool = False) -> Dict[str, Any]:
        """Run the MQTT Bus test suite"""
        
        logger.info(f"Starting MQTT Bus test suite - Type: {test_type}")
        
        # Build pytest command
        cmd = ["python", "-m", "pytest"]
        
        # Add test files based on type
        if test_type == "all":
            cmd.append(str(self.test_dir / "test_mqtt_bus_infrastructure.py"))
        elif test_type == "infrastructure":
            cmd.extend(["-k", "infrastructure", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "discovery":
            cmd.extend(["-k", "discovery", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "messaging":
            cmd.extend(["-k", "messaging", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "security":
            cmd.extend(["-k", "security", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "voice":
            cmd.extend(["-k", "voice", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "devices":
            cmd.extend(["-k", "devices", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "performance":
            cmd.extend(["-k", "performance", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "resilience":
            cmd.extend(["-k", "resilience", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "monitoring":
            cmd.extend(["-k", "monitoring", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        elif test_type == "critical":
            cmd.extend(["-m", "critical", str(self.test_dir / "test_mqtt_bus_infrastructure.py")])
        else:
            raise ValueError(f"Unknown test type: {test_type}")
        
        # Add options
        if verbose:
            cmd.append("-v")
        
        if parallel:
            cmd.extend(["-n", "auto"])
        
        if coverage:
            cmd.extend(["--cov=services", "--cov-report=term-missing"])
            if html_report:
                cmd.extend(["--cov-report=html", f"--cov-report-dir={self.results_dir}/coverage"])
        
        # Add output options
        cmd.extend([
            "--tb=short",
            f"--junitxml={self.results_dir}/junit.xml",
            f"--html={self.results_dir}/report.html",
            "--self-contained-html"
        ])
        
        # Run tests
        start_time = time.time()
        logger.info(f"Running command: {' '.join(cmd)}")
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd())
            end_time = time.time()
            
            # Parse results
            test_results = {
                "test_type": test_type,
                "start_time": start_time,
                "end_time": end_time,
                "duration": end_time - start_time,
                "return_code": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "success": result.returncode == 0
            }
            
            # Save results
            results_file = self.results_dir / f"test_results_{test_type}_{int(start_time)}.json"
            with open(results_file, 'w') as f:
                json.dump(test_results, f, indent=2)
            
            logger.info(f"Test execution completed in {test_results['duration']:.2f} seconds")
            logger.info(f"Results saved to: {results_file}")
            
            return test_results
            
        except Exception as e:
            logger.error(f"Test execution failed: {e}")
            return {
                "test_type": test_type,
                "success": False,
                "error": str(e),
                "duration": 0
            }
    
    def run_bdd_tests(self) -> Dict[str, Any]:
        """Run BDD tests using behave"""
        logger.info("Running BDD tests")
        
        cmd = ["behave", str(self.test_dir / "mqtt_bus_test_suite.feature"), "--format=json", "--outfile=results/bdd_results.json"]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd())
            
            test_results = {
                "test_type": "bdd",
                "return_code": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "success": result.returncode == 0
            }
            
            return test_results
            
        except Exception as e:
            logger.error(f"BDD test execution failed: {e}")
            return {
                "test_type": "bdd",
                "success": False,
                "error": str(e)
            }
    
    def generate_test_report(self, results: List[Dict[str, Any]]) -> str:
        """Generate a comprehensive test report"""
        report = []
        report.append("# MQTT Bus Test Suite Report")
        report.append(f"Generated at: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        total_tests = len(results)
        successful_tests = sum(1 for r in results if r.get("success", False))
        failed_tests = total_tests - successful_tests
        
        report.append(f"## Summary")
        report.append(f"- Total test runs: {total_tests}")
        report.append(f"- Successful: {successful_tests}")
        report.append(f"- Failed: {failed_tests}")
        report.append(f"- Success rate: {(successful_tests/total_tests*100):.1f}%")
        report.append("")
        
        report.append("## Test Results")
        for result in results:
            status = "✅ PASS" if result.get("success", False) else "❌ FAIL"
            duration = result.get("duration", 0)
            report.append(f"- {result.get('test_type', 'unknown')}: {status} ({duration:.2f}s)")
        
        report.append("")
        report.append("## Detailed Results")
        for result in results:
            report.append(f"### {result.get('test_type', 'unknown')}")
            if result.get("success", False):
                report.append("Status: ✅ PASSED")
            else:
                report.append("Status: ❌ FAILED")
                if "error" in result:
                    report.append(f"Error: {result['error']}")
            
            if "duration" in result:
                report.append(f"Duration: {result['duration']:.2f} seconds")
            
            report.append("")
        
        return "\n".join(report)
    
    def run_all_tests(self) -> List[Dict[str, Any]]:
        """Run all test types"""
        test_types = [
            "critical",
            "infrastructure", 
            "discovery",
            "messaging",
            "security",
            "voice",
            "devices",
            "performance",
            "resilience",
            "monitoring"
        ]
        
        results = []
        
        for test_type in test_types:
            logger.info(f"Running {test_type} tests...")
            result = self.run_tests(test_type=test_type, verbose=True)
            results.append(result)
        
        # Generate report
        report = self.generate_test_report(results)
        report_file = self.results_dir / "test_report.md"
        with open(report_file, 'w') as f:
            f.write(report)
        
        logger.info(f"Test report saved to: {report_file}")
        
        return results


def main():
    """Main entry point for test runner"""
    parser = argparse.ArgumentParser(description="MQTT Bus Test Runner")
    parser.add_argument("--type", "-t", 
                       choices=["all", "critical", "infrastructure", "discovery", 
                               "messaging", "security", "voice", "devices", 
                               "performance", "resilience", "monitoring", "bdd"],
                       default="all",
                       help="Type of tests to run")
    parser.add_argument("--verbose", "-v", action="store_true",
                       help="Verbose output")
    parser.add_argument("--parallel", "-p", action="store_true",
                       help="Run tests in parallel")
    parser.add_argument("--coverage", "-c", action="store_true",
                       help="Generate coverage report")
    parser.add_argument("--html-report", action="store_true",
                       help="Generate HTML coverage report")
    parser.add_argument("--all", action="store_true",
                       help="Run all test types")
    
    args = parser.parse_args()
    
    runner = MQTTTestRunner()
    
    if args.all:
        logger.info("Running all test types...")
        results = runner.run_all_tests()
        
        # Print summary
        successful = sum(1 for r in results if r.get("success", False))
        total = len(results)
        logger.info(f"All tests completed: {successful}/{total} successful")
        
    elif args.type == "bdd":
        result = runner.run_bdd_tests()
        if result.get("success", False):
            logger.info("BDD tests completed successfully")
        else:
            logger.error("BDD tests failed")
            sys.exit(1)
    else:
        result = runner.run_tests(
            test_type=args.type,
            verbose=args.verbose,
            parallel=args.parallel,
            coverage=args.coverage,
            html_report=args.html_report
        )
        
        if result.get("success", False):
            logger.info(f"{args.type} tests completed successfully")
        else:
            logger.error(f"{args.type} tests failed")
            sys.exit(1)


if __name__ == "__main__":
    main()




