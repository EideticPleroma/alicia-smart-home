#!/bin/bash

# Alicia MCP Orchestration Setup Script
# This script sets up the MCP orchestration system for the Alicia project

set -e

echo "üöÄ Setting up Alicia MCP Orchestration System..."

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker and try again."
    exit 1
fi

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js is not installed. Please install Node.js and try again."
    exit 1
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm is not installed. Please install npm and try again."
    exit 1
fi

echo "‚úÖ Prerequisites check passed"

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    echo "üìù Creating .env file from template..."
    cp env.example .env
    echo "‚ö†Ô∏è  Please edit .env file with your configuration before continuing"
    echo "   - Set your Grok API key"
    echo "   - Configure MQTT credentials"
    echo "   - Adjust quality gate settings"
    read -p "Press Enter to continue after editing .env file..."
fi

# Load environment variables
source .env

# Start MCP server
echo "üê≥ Starting MCP server..."
if docker ps | grep -q mcp-server; then
    echo "MCP server is already running"
else
    docker run -d --name mcp-server -p ${MCP_SERVER_PORT}:4000 mcpgee/mcp-server:latest
    echo "‚úÖ MCP server started on port ${MCP_SERVER_PORT}"
fi

# Wait for MCP server to be ready
echo "‚è≥ Waiting for MCP server to be ready..."
sleep 10

# Test MCP server connection
if curl -s http://localhost:${MCP_SERVER_PORT}/health > /dev/null; then
    echo "‚úÖ MCP server is ready"
else
    echo "‚ùå MCP server is not responding. Please check the logs:"
    echo "   docker logs mcp-server"
    exit 1
fi

# Install Cline if not already installed
if ! command -v cline &> /dev/null; then
    echo "üì¶ Installing Cline..."
    npm install -g @cline/cli
    echo "‚úÖ Cline installed"
else
    echo "‚úÖ Cline is already installed"
fi

# Configure Cline
echo "‚öôÔ∏è  Configuring Cline..."
mkdir -p ~/.cline
cp config/cline-config.json ~/.cline/config.json
echo "‚úÖ Cline configured"

# Test Cline connection
echo "üîç Testing Cline connection..."
if cline --test-connection > /dev/null 2>&1; then
    echo "‚úÖ Cline connection successful"
else
    echo "‚ùå Cline connection failed. Please check your configuration:"
    echo "   cline --test-connection"
    exit 1
fi

# Create necessary directories
echo "üìÅ Creating necessary directories..."
mkdir -p logs
mkdir -p data
mkdir -p temp
echo "‚úÖ Directories created"

# Set up monitoring
echo "üìä Setting up monitoring..."
chmod +x scripts/monitor.sh
chmod +x scripts/start-orchestration.sh
echo "‚úÖ Monitoring setup complete"

echo ""
echo "üéâ Alicia MCP Orchestration System setup complete!"
echo ""
echo "Next steps:"
echo "1. Review and edit .env file with your settings"
echo "2. Run: ./scripts/start-orchestration.sh"
echo "3. Monitor with: ./scripts/monitor.sh"
echo ""
echo "Documentation:"
echo "- Quick Start: docs/MCP_QUICK_START.md"
echo "- Full Guide: docs/MCP_IMPLEMENTATION_GUIDE_HUMAN_READABLE.md"
echo "- Alicia Context: docs/MCP_ORCHESTRATION_SYSTEM_ALICIA_CONTEXT.md"
echo ""
