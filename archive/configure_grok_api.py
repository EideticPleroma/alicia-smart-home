#!/usr/bin/env python3
"""
Configure Grok API Key and Rate Limits for Alicia Voice Assistant
Interactive setup script for API key configuration and rate limit testing
"""

import os
import sys
import asyncio
import time
from pathlib import Path

def check_api_key():
    """Check if API key is configured"""
    api_key = os.getenv("XAI_API_KEY")
    if api_key:
        print(f"✅ API Key found: {api_key[:8]}...{api_key[-4:]}")
        return True
    else:
        print("❌ API Key not found")
        return False

def set_api_key():
    """Interactive API key setup"""
    print("\n🔑 Grok API Key Setup")
    print("=" * 40)
    print("1. Visit https://console.x.ai")
    print("2. Sign up/login to your account")
    print("3. Navigate to 'API Keys' section")
    print("4. Click 'Create API Key'")
    print("5. Name it 'Alicia Integration'")
    print("6. Copy the key (it's only shown once!)")
    print()
    
    api_key = input("Enter your Grok API key: ").strip()
    
    if not api_key:
        print("❌ No API key provided")
        return False
    
    if len(api_key) < 20:
        print("❌ API key seems too short. Please check and try again.")
        return False
    
    # Set environment variable for current session
    os.environ["XAI_API_KEY"] = api_key
    
    # Create .env file
    env_content = f"""# Alicia Voice Assistant Environment Variables
# Generated by configure_grok_api.py

# Grok API Configuration
XAI_API_KEY={api_key}

# MQTT Configuration
MQTT_BROKER=alicia_mqtt
MQTT_PORT=1883
MQTT_USERNAME=voice_assistant
MQTT_PASSWORD=alicia_ha_mqtt_2024

# Voice Processing
WHISPER_URL=tcp://alicia_wyoming_whisper:10300
PIPER_URL=tcp://alicia_unified_tts:10200

# LLM Settings
LLM_ENABLED=true
LLM_PROVIDER=grok
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✅ API key configured and saved to .env file")
    return True

def test_rate_limits():
    """Test rate limiting functionality"""
    print("\n⚡ Testing Rate Limits")
    print("=" * 40)
    
    try:
        sys.path.append('./voice-processing')
        from grok_handler import create_grok_handler
        
        # Test with different rate limits
        rate_limits = [1.0, 2.0, 5.0]
        
        for rate_limit in rate_limits:
            print(f"\nTesting rate limit: {rate_limit}s between requests")
            
            handler = create_grok_handler(rate_limit=rate_limit)
            
            # Test multiple requests
            start_time = time.time()
            responses = []
            
            for i in range(3):
                print(f"  Request {i+1}/3...")
                response = await handler.process_command(f"Test message {i+1}")
                responses.append(response)
            
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"  ✅ Completed in {duration:.1f}s (expected: ~{rate_limit * 2:.1f}s)")
            
            # Verify rate limiting worked
            if duration >= rate_limit * 2:  # Should take at least 2 * rate_limit
                print(f"  ✅ Rate limiting working correctly")
            else:
                print(f"  ⚠️ Rate limiting may not be working as expected")
        
        return True
        
    except Exception as e:
        print(f"❌ Rate limit test failed: {e}")
        return False

def test_api_connection():
    """Test basic API connection"""
    print("\n🔌 Testing API Connection")
    print("=" * 40)
    
    try:
        sys.path.append('./voice-processing')
        from grok_handler import create_grok_handler
        
        handler = create_grok_handler()
        
        print("Sending test request to Grok API...")
        response = await handler.process_command("Hello, this is a test of the Grok API connection.")
        
        if response and len(response) > 0:
            print(f"✅ API connection successful!")
            print(f"Response: {response[:100]}...")
            return True
        else:
            print("❌ API connection failed - no response received")
            return False
            
    except Exception as e:
        print(f"❌ API connection failed: {e}")
        return False

def show_rate_limit_recommendations():
    """Show rate limit recommendations"""
    print("\n📊 Rate Limit Recommendations")
    print("=" * 40)
    print("For a voice assistant, we recommend:")
    print()
    print("🟢 Conservative (Recommended):")
    print("   - 2 seconds between requests")
    print("   - 30 requests per minute")
    print("   - 1000 requests per hour")
    print("   - Good for: Personal use, testing")
    print()
    print("🟡 Moderate:")
    print("   - 1 second between requests")
    print("   - 60 requests per minute")
    print("   - 2000 requests per hour")
    print("   - Good for: Active household use")
    print()
    print("🔴 Aggressive (Use with caution):")
    print("   - 0.5 seconds between requests")
    print("   - 120 requests per minute")
    print("   - 5000 requests per hour")
    print("   - Good for: Heavy usage, monitoring required")
    print()
    print("💡 Note: Grok's actual rate limits are not publicly documented.")
    print("   Start conservative and adjust based on usage patterns.")

def update_config_file():
    """Update configuration file with rate limits"""
    print("\n⚙️ Updating Configuration")
    print("=" * 40)
    
    config_path = Path("voice-processing/config/assistant_config.yaml")
    if not config_path.exists():
        print("❌ Configuration file not found")
        return False
    
    print("✅ Configuration file found")
    print("Current rate limit settings:")
    print("  - 2 seconds between requests")
    print("  - 30 requests per minute")
    print("  - 1000 requests per hour")
    print("  - 30 second timeout")
    print("  - 3 retry attempts")
    
    return True

async def main():
    """Main configuration function"""
    print("🚀 Grok API Configuration for Alicia Voice Assistant")
    print("=" * 60)
    
    # Check if API key is already set
    if check_api_key():
        print("\nAPI key is already configured!")
        choice = input("Do you want to reconfigure it? (y/N): ").strip().lower()
        if choice != 'y':
            print("Using existing API key...")
        else:
            if not set_api_key():
                print("❌ Failed to configure API key")
                return
    else:
        if not set_api_key():
            print("❌ Failed to configure API key")
            return
    
    # Test API connection
    print("\n" + "=" * 60)
    if not await test_api_connection():
        print("❌ API connection test failed. Please check your API key.")
        return
    
    # Show rate limit recommendations
    show_rate_limit_recommendations()
    
    # Test rate limits
    print("\n" + "=" * 60)
    choice = input("Do you want to test rate limiting? (Y/n): ").strip().lower()
    if choice != 'n':
        if not await test_rate_limits():
            print("❌ Rate limit test failed")
            return
    
    # Update configuration
    update_config_file()
    
    # Final summary
    print("\n" + "=" * 60)
    print("🎉 Configuration Complete!")
    print("=" * 60)
    print("✅ API key configured")
    print("✅ Rate limits set (2s between requests)")
    print("✅ Configuration file updated")
    print("✅ API connection tested")
    print()
    print("Next steps:")
    print("1. Start your voice assistant: docker-compose up -d")
    print("2. Test voice commands with Grok enabled")
    print("3. Monitor usage in xAI dashboard")
    print("4. Adjust rate limits if needed")
    print()
    print("For help, see GROK_INTEGRATION_GUIDE.md")

if __name__ == "__main__":
    asyncio.run(main())
